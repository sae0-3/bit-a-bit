/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RegisterImport } from './routes/register'
import { Route as LoginImport } from './routes/login'
import { Route as IndexImport } from './routes/index'
import { Route as QuestionsCreateIndexImport } from './routes/questions/create/index'
import { Route as QuestionsPreviewQuestionIdImport } from './routes/questions/preview/$questionId'
import { Route as QuestionsEditQuestionIdImport } from './routes/questions/edit/$questionId'
import { Route as QuestionsCreateQuestionIdImport } from './routes/questions/create/$questionId'

// Create/Update Routes

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const QuestionsCreateIndexRoute = QuestionsCreateIndexImport.update({
  id: '/questions/create/',
  path: '/questions/create/',
  getParentRoute: () => rootRoute,
} as any)

const QuestionsPreviewQuestionIdRoute = QuestionsPreviewQuestionIdImport.update(
  {
    id: '/questions/preview/$questionId',
    path: '/questions/preview/$questionId',
    getParentRoute: () => rootRoute,
  } as any,
)

const QuestionsEditQuestionIdRoute = QuestionsEditQuestionIdImport.update({
  id: '/questions/edit/$questionId',
  path: '/questions/edit/$questionId',
  getParentRoute: () => rootRoute,
} as any)

const QuestionsCreateQuestionIdRoute = QuestionsCreateQuestionIdImport.update({
  id: '/questions/create/$questionId',
  path: '/questions/create/$questionId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/questions/create/$questionId': {
      id: '/questions/create/$questionId'
      path: '/questions/create/$questionId'
      fullPath: '/questions/create/$questionId'
      preLoaderRoute: typeof QuestionsCreateQuestionIdImport
      parentRoute: typeof rootRoute
    }
    '/questions/edit/$questionId': {
      id: '/questions/edit/$questionId'
      path: '/questions/edit/$questionId'
      fullPath: '/questions/edit/$questionId'
      preLoaderRoute: typeof QuestionsEditQuestionIdImport
      parentRoute: typeof rootRoute
    }
    '/questions/preview/$questionId': {
      id: '/questions/preview/$questionId'
      path: '/questions/preview/$questionId'
      fullPath: '/questions/preview/$questionId'
      preLoaderRoute: typeof QuestionsPreviewQuestionIdImport
      parentRoute: typeof rootRoute
    }
    '/questions/create/': {
      id: '/questions/create/'
      path: '/questions/create'
      fullPath: '/questions/create'
      preLoaderRoute: typeof QuestionsCreateIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/questions/create/$questionId': typeof QuestionsCreateQuestionIdRoute
  '/questions/edit/$questionId': typeof QuestionsEditQuestionIdRoute
  '/questions/preview/$questionId': typeof QuestionsPreviewQuestionIdRoute
  '/questions/create': typeof QuestionsCreateIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/questions/create/$questionId': typeof QuestionsCreateQuestionIdRoute
  '/questions/edit/$questionId': typeof QuestionsEditQuestionIdRoute
  '/questions/preview/$questionId': typeof QuestionsPreviewQuestionIdRoute
  '/questions/create': typeof QuestionsCreateIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/questions/create/$questionId': typeof QuestionsCreateQuestionIdRoute
  '/questions/edit/$questionId': typeof QuestionsEditQuestionIdRoute
  '/questions/preview/$questionId': typeof QuestionsPreviewQuestionIdRoute
  '/questions/create/': typeof QuestionsCreateIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/register'
    | '/questions/create/$questionId'
    | '/questions/edit/$questionId'
    | '/questions/preview/$questionId'
    | '/questions/create'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/register'
    | '/questions/create/$questionId'
    | '/questions/edit/$questionId'
    | '/questions/preview/$questionId'
    | '/questions/create'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/register'
    | '/questions/create/$questionId'
    | '/questions/edit/$questionId'
    | '/questions/preview/$questionId'
    | '/questions/create/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
  QuestionsCreateQuestionIdRoute: typeof QuestionsCreateQuestionIdRoute
  QuestionsEditQuestionIdRoute: typeof QuestionsEditQuestionIdRoute
  QuestionsPreviewQuestionIdRoute: typeof QuestionsPreviewQuestionIdRoute
  QuestionsCreateIndexRoute: typeof QuestionsCreateIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  QuestionsCreateQuestionIdRoute: QuestionsCreateQuestionIdRoute,
  QuestionsEditQuestionIdRoute: QuestionsEditQuestionIdRoute,
  QuestionsPreviewQuestionIdRoute: QuestionsPreviewQuestionIdRoute,
  QuestionsCreateIndexRoute: QuestionsCreateIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/login",
        "/register",
        "/questions/create/$questionId",
        "/questions/edit/$questionId",
        "/questions/preview/$questionId",
        "/questions/create/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/questions/create/$questionId": {
      "filePath": "questions/create/$questionId.tsx"
    },
    "/questions/edit/$questionId": {
      "filePath": "questions/edit/$questionId.tsx"
    },
    "/questions/preview/$questionId": {
      "filePath": "questions/preview/$questionId.tsx"
    },
    "/questions/create/": {
      "filePath": "questions/create/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
